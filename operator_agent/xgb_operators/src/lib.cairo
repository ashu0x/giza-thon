mod xgb_inference;

fn main(input_vector: Span<i32>) -> i32 {
    let tree_0 = xgb_inference::Tree {
    base_weights: array![0, -4059, 91412, -4276, 21814, 58779, 94073, -4417, 2056, 31865, 6204, 19054, 5767, 6572, 28364, -4470, -2881, 200, 4293, 4862, 37287, 342, 11060, -1351, -1163, -2464, -1173, 722, -899, 5941, -156, 8450, 12990, 428, -244, 917, 3707, -847, -450, -2, 503, 1205, 2539, 409, -453, -196, 99].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 0, 0, 0, 0, 23, 25, 27, 29, 0, 31, 33, 35, 0, 0, 37, 0, 39, 0, 41, 43, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 0, 0, 0, 0, 24, 26, 28, 30, 0, 32, 34, 36, 0, 0, 38, 0, 40, 0, 42, 44, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![9, 9, 9, 9, 8, 8, 11, 9, 9, 9, 12, 0, 0, 0, 0, 9, 8, 8, 8, 0, 9, 8, 9, 0, 0, 9, 0, 9, 0, 9, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![9400000, 2700000, 13600000, 600000, 31900000, 14500000, 109539, 200000, 1100000, 4500000, 2147483647, 19054, 5767, 6572, 28364, 100000, 31900000, 31900000, 14700000, 4862, 5600000, 53700000, 3200000, -1351, -1163, 400000, -1173, 800000, -899, 1600000, 48900000, 8450, 12990, 428, 5500000, 917, 3707, -847, -450, -2, 503, 1205, 2539, 409, -453, -196, 99].span()
};
    let tree_1 = xgb_inference::Tree {
    base_weights: array![13, -2837, 64200, -2973, 18727, 38678, 65787, -3084, 2407, 26359, 5632, 12461, 2879, 1922, 19796, -3119, -1527, 923, 4517, 6149, 9588, 9019, -12, -946, -2658, -1116, -797, 1365, -557, 6843, 648, 1283, 3132, -254, 118, -769, -907, -425, -123, 178, 673, 1356, 2901, 424, -450, -100, -27].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 0, 0, 0, 0, 23, 25, 27, 29, 0, 0, 31, 33, 0, 35, 37, 0, 39, 0, 41, 43, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 0, 0, 0, 0, 24, 26, 28, 30, 0, 0, 32, 34, 0, 36, 38, 0, 40, 0, 42, 44, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![9, 9, 9, 9, 8, 8, 11, 9, 9, 9, 8, 0, 0, 0, 0, 9, 8, 8, 8, 0, 0, 9, 1, 0, 8, 9, 0, 9, 0, 9, 8, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![9400000, 4000000, 11200000, 700000, 31900000, 14500000, 53963, 300000, 1400000, 6400000, 74100000, 12461, 2879, 1922, 19796, 100000, 31900000, 31900000, 31900000, 6149, 9588, 5000000, 6270, -946, 31900000, 500000, -797, 1000000, -557, 2100000, 74100000, 1283, 3132, 5300000, 118, -769, -907, -425, -123, 178, 673, 1356, 2901, 424, -450, -100, -27].span()
};
    let num_trees: u32 = 2;
    let base_score: i32 = 4504;
    let opt_type: u8 = 0;
    let trees: Span<xgb_inference::Tree> = array![tree_0, tree_1].span();
    let mut result: i32 = xgb_inference::accumulate_scores_from_trees(num_trees, trees, input_vector, 0, 0);

    if opt_type == 1 {
        // Implement logic here
    } else {
        result = result + base_score;
    }

    return result;
}