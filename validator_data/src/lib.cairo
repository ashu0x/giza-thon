mod xgb_inference;

fn main(input_vector: Span<i32>) -> i32 {
    let tree_0 = xgb_inference::Tree {
    base_weights: array![0, -1925, 267, -3654, -1483, -203, 557, -1602, -3101, -2011, -1167, -408, 46, 585, -320, -690, -1046, -521, -726, -379, -838, -483, -284, 135, -59, 408, 769, -441, -351, -19, -517, -197, -574, 23, 350, -284, 119, 419, -92, 701, 866, -206, -39, -20, 10, -177, -125, 34, -68, -129, -266, 44, -14, 66, 129, -59, -234, 55, -125, 98, 163, 217, 73, 290, 224].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 25, 0, 0, 0, 0, 0, 0, 27, 29, 31, 33, 35, 37, 39, 41, 0, 43, 45, 47, 49, 51, 53, 55, 57, 59, 0, 61, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 26, 0, 0, 0, 0, 0, 0, 28, 30, 32, 34, 36, 38, 40, 42, 0, 44, 46, 48, 50, 52, 54, 56, 58, 60, 0, 62, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96146, 93753, 97529, 90313, 95373, 97101, 99022, -1602, 92543, 95077, 95972, 96837, 97374, 98158, -320, -690, -1046, -521, -726, -379, 96033, 96195, 97039, 97291, 97435, 98147, 98501, 96012, -351, 96164, 96548, 96853, 97083, 97181, 97325, 97424, 97521, 97898, -92, 98484, 98690, -206, -39, -20, 10, -177, -125, 34, -68, -129, -266, 44, -14, 66, 129, -59, -234, 55, -125, 98, 163, 217, 73, 290, 224].span()
};
    let tree_1 = xgb_inference::Tree {
    base_weights: array![-4, -1377, 187, -2645, -1053, -144, 390, -1181, -2226, -1353, -762, -288, 31, 411, -768, -499, -749, -272, -1424, -33, -814, -340, -202, 96, -45, 312, 576, -289, -159, -466, -1054, -919, -638, -14, -364, -170, -198, 17, 249, -204, 82, 321, -109, 539, 761, -245, -402, -244, -408, -139, -254, -15, 7, -125, -88, -4, -61, 31, -10, 47, 92, -42, -173, 39, -92, 65, 117, 177, 45, 279, 134].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 25, 27, 0, 0, 0, 29, 0, 31, 33, 35, 37, 39, 41, 43, 0, 0, 0, 45, 47, 49, 51, 53, 55, 0, 57, 59, 61, 63, 65, 0, 67, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 26, 28, 0, 0, 0, 30, 0, 32, 34, 36, 38, 40, 42, 44, 0, 0, 0, 46, 48, 50, 52, 54, 56, 0, 58, 60, 62, 64, 66, 0, 68, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96146, 93753, 97529, 90313, 95589, 97101, 99022, -1181, 92543, 94516, 95615, 96837, 97374, 98277, 99086, -499, -749, -272, 95373, -33, 95909, 96195, 97083, 97291, 97435, 98272, 98783, -289, -159, -466, 95511, 95869, 96033, 96164, 96548, 96885, -198, 97181, 97325, 97424, 97521, 97858, -109, 98690, 98930, -245, -402, -244, -408, -139, -254, -15, 7, -125, -88, -4, -61, 31, -10, 47, 92, -42, -173, 39, -92, 65, 117, 177, 45, 279, 134].span()
};
    let tree_2 = xgb_inference::Tree {
    base_weights: array![-6, -1069, 121, -1916, -812, -110, 278, -871, -1599, -966, -593, -218, 33, 293, -568, -361, -536, -197, -1015, -24, -653, -294, -168, 89, -19, 200, 386, -215, -117, -1097, -772, -576, -827, -422, -260, -145, -264, 7, 162, -147, 60, 212, -188, 354, 540, -270, -387, -177, -299, -203, -33, -303, -158, -60, -184, -3, -88, -57, -6, -98, -38, 62, -28, 36, 65, -29, -129, 49, -3, 49, 82, -6, -99, 116, -353, 191, 105].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 25, 27, 0, 0, 0, 29, 0, 31, 33, 35, 37, 39, 41, 43, 0, 0, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 26, 28, 0, 0, 0, 30, 0, 32, 34, 36, 38, 40, 42, 44, 0, 0, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![95972, 93753, 97564, 90313, 95589, 97127, 99022, -871, 92543, 94516, 95615, 96548, 97374, 98158, 99086, -361, -536, -197, 95373, -24, 95869, 96146, 97039, 97261, 97435, 98143, 98730, -215, -117, 95077, 95511, 95816, 95909, 96033, 96195, 96951, 97101, 97181, 97325, 97424, 97483, 97898, 98147, 98714, 98897, -270, -387, -177, -299, -203, -33, -303, -158, -60, -184, -3, -88, -57, -6, -98, -38, 62, -28, 36, 65, -29, -129, 49, -3, 49, 82, -6, -99, 116, -353, 191, 105].span()
};
    let tree_3 = xgb_inference::Tree {
    base_weights: array![-7, -758, 86, -1387, -576, -80, 192, -643, -1148, -694, -425, -150, 19, 202, -419, -869, -384, -142, -729, -18, -463, -182, -98, 64, -29, 152, 295, -160, -86, -317, -167, -783, -565, -409, -546, -159, -380, 45, -125, -4, 113, -92, 49, 75, 173, 268, 383, -192, -276, -128, -222, -144, -24, -225, -118, -53, 23, -194, -62, -12, 62, -160, -28, 30, -49, 25, 46, 0, -34, 62, -16, 45, 2, 54, 11, 91, -262, 131, 66].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 25, 27, 29, 0, 0, 31, 0, 33, 35, 37, 39, 41, 43, 45, 0, 0, 0, 0, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 26, 28, 30, 0, 0, 32, 0, 34, 36, 38, 40, 42, 44, 46, 0, 0, 0, 0, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96012, 93753, 97529, 90313, 95589, 97127, 99022, -643, 92543, 94516, 95615, 96837, 97374, 98301, 99086, 92243, -384, -142, 95373, -18, 95869, 96774, 96885, 97250, 97453, 97718, 98730, -160, -86, -317, -167, 95077, 95511, 95816, 95909, 96709, 96789, 96866, 96895, 97215, 97325, 97392, 97483, 97625, 98272, 98714, 98930, -192, -276, -128, -222, -144, -24, -225, -118, -53, 23, -194, -62, -12, 62, -160, -28, 30, -49, 25, 46, 0, -34, 62, -16, 45, 2, 54, 11, 91, -262, 131, 66].span()
};
    let tree_4 = xgb_inference::Tree {
    base_weights: array![-7, -530, 63, -1011, -402, -48, 137, -474, -249, -499, -300, -100, 15, 145, -310, -103, -523, -267, -173, -133, -81, 119, 6, 117, 235, -119, -63, -597, -431, -306, 36, -111, -130, 51, -101, 22, 55, -114, 21, 96, 156, 148, 216, -137, -289, -51, -146, -13, -100, -39, 56, 0, 57, -53, -21, -1, -62, 24, -3, 31, -57, 59, 12, -39, 72].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 15, 17, 19, 21, 23, 25, 0, 27, 29, 0, 31, 33, 35, 37, 39, 41, 0, 0, 43, 45, 47, 0, 49, 0, 51, 53, 0, 0, 55, 57, 59, 61, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 16, 18, 20, 22, 24, 26, 0, 28, 30, 0, 32, 34, 36, 38, 40, 42, 0, 0, 44, 46, 48, 0, 50, 0, 52, 54, 0, 0, 56, 58, 60, 62, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96088, 93753, 97586, 90313, 95589, 97127, 99022, -474, -249, 94516, 96033, 96548, 97181, 98456, 99086, -103, 95149, 96012, -173, 96530, 96638, 97148, 97237, 98158, 98473, -119, -63, 95077, 95255, 95615, 36, 96495, -130, 96622, 96837, 22, 55, 97215, 97374, 98143, 98361, 148, 98491, -137, -289, -51, -146, -13, -100, -39, 56, 0, 57, -53, -21, -1, -62, 24, -3, 31, -57, 59, 12, -39, 72].span()
};
    let tree_5 = xgb_inference::Tree {
    base_weights: array![-6, -380, 44, -727, -288, -27, 104, -350, -590, -381, -229, -70, 13, 111, -229, -415, -679, -92, -499, -210, -129, -60, -141, 22, -114, 86, 164, -88, -46, -172, -60, -274, -150, -213, -330, -233, 26, -78, 34, -185, -45, 0, 47, 98, -219, 194, 104, -38, -146, -62, -92, -22, -75, 36, -9, -33, -109, 13, -38, 9, -23, 45, 9, 25, 68, -94, -4, 53, 114, -120, 60].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0, 33, 35, 0, 37, 39, 41, 0, 43, 45, 0, 0, 0, 0, 0, 0, 0, 47, 49, 0, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 26, 28, 30, 32, 0, 34, 36, 0, 38, 40, 42, 0, 44, 46, 0, 0, 0, 0, 0, 0, 0, 48, 50, 0, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96088, 93753, 97700, 90313, 95373, 97127, 99022, -350, 92543, 95077, 96033, 97039, 97690, 98400, 99086, 92243, 93179, -92, 95149, 96012, -129, 96951, 97101, 97453, -114, 98361, 98690, -88, -46, -172, -60, -274, -150, -213, 95255, 95869, 26, 96941, 96997, 97083, 97110, 97392, 97483, 98301, 98389, 98671, 98730, -38, -146, -62, -92, -22, -75, 36, -9, -33, -109, 13, -38, 9, -23, 45, 9, 25, 68, -94, -4, 53, 114, -120, 60].span()
};
    let tree_6 = xgb_inference::Tree {
    base_weights: array![-6, -319, 25, -601, -253, -42, 63, -258, -461, -296, -189, -89, -21, 67, -169, -309, -204, -260, -369, -117, -209, -79, -91, -16, -80, 50, 115, -65, -34, -127, -44, -108, -65, -157, -245, -57, -8, -112, -165, -90, 47, -22, 78, 56, -159, 71, 104, -28, -109, 6, -63, -21, -47, -4, -35, 14, 43, -90, -21, -19, 35].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 25, 27, 29, 0, 31, 33, 35, 37, 39, 0, 41, 0, 43, 45, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 49, 51, 0, 53, 0, 55, 57, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 26, 28, 30, 0, 32, 34, 36, 38, 40, 0, 42, 0, 44, 46, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 50, 52, 0, 54, 0, 56, 58, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![95774, 93179, 97435, 90313, 95373, 96548, 99022, -258, 92543, 95077, 95511, 96530, 97424, 98400, 99086, 92243, -204, 93753, 95149, 95386, 95589, 96495, -91, 97415, -80, 98361, 98433, -65, -34, -127, -44, -108, -65, -157, 95255, -57, -8, -112, 95615, 96402, 47, 97392, 78, 98277, 98372, 71, 98445, -28, -109, 6, -63, -21, -47, -4, -35, 14, 43, -90, -21, -19, 35].span()
};
    let tree_7 = xgb_inference::Tree {
    base_weights: array![-5, -201, 22, -445, -162, -12, 56, -190, -343, -205, -113, -7, -131, 60, -125, -229, -151, -78, -192, -72, -159, -33, 19, 57, 85, -49, -25, -95, -33, -31, -62, -107, 30, -112, -105, 35, -39, 10, 107, 61, -154, 4, -39, -9, -62, -48, -10, 6, -17, 21, 45, 16, 61, -79, -7].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 0, 23, 25, 27, 0, 0, 29, 31, 33, 35, 37, 39, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 43, 0, 45, 47, 49, 51, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 0, 24, 26, 28, 0, 0, 30, 32, 34, 36, 38, 40, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 44, 0, 46, 48, 50, 52, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96146, 93179, 97766, 90313, 95589, 97762, 99022, -190, 92543, 93753, 95869, 97237, -131, 98984, 99086, 92243, -151, -78, 94516, 95816, 95909, 96195, 97723, 98930, 85, -49, -25, -95, -33, -31, -62, 95615, 30, -112, 96033, 35, 96249, 97667, 97751, 98783, 98961, 4, -39, -9, -62, -48, -10, 6, -17, 21, 45, 16, 61, -79, -7].span()
};
    let tree_8 = xgb_inference::Tree {
    base_weights: array![-4, -149, 15, -330, -118, -6, 43, -140, -254, -155, -90, -26, 7, 89, 37, -170, -112, -128, -214, -76, -74, -18, -89, 93, 3, 105, 28, -70, -25, -161, -67, -99, -125, -89, 27, -32, 31, -165, -46, 18, 43, -77, 8, 29, 192, -64, 45, -41, -67, -26, -7, -5, -65, -20, -47, -6, -104, 73, 1, -24, -68, 39, -33, 1, -43, 27, 1, 37, -45, 72, 45, -9, -113, 112, 12].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 19, 21, 23, 0, 25, 27, 0, 29, 31, 33, 0, 35, 37, 39, 41, 43, 45, 0, 0, 47, 49, 0, 51, 53, 0, 55, 57, 59, 61, 0, 0, 63, 65, 67, 69, 71, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 20, 22, 24, 0, 26, 28, 0, 30, 32, 34, 0, 36, 38, 40, 42, 44, 46, 0, 0, 48, 50, 0, 52, 54, 0, 56, 58, 60, 62, 0, 0, 64, 66, 68, 70, 72, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96088, 93179, 97898, 90313, 95373, 97127, 97921, -140, 92543, 95077, 96033, 97039, 97181, 89, 98011, 92243, -112, 94689, 95149, 96012, -74, 96895, 97066, 97148, 97237, 97965, 98110, -70, -25, 94516, 94924, -99, 95255, 95869, 27, 96885, 96919, 97048, 97083, 18, 43, 97215, 97276, 97945, 97977, 98096, 98135, -41, -67, -26, -7, -5, -65, -20, -47, -6, -104, 73, 1, -24, -68, 39, -33, 1, -43, 27, 1, 37, -45, 72, 45, -9, -113, 112, 12].span()
};
    let tree_9 = xgb_inference::Tree {
    base_weights: array![-3, -126, 9, -219, -91, -11, 27, -103, -179, -11, -97, -8, -84, 30, -31, -126, -206, -120, -76, -31, 3, 28, 60, -52, -18, -83, -45, -84, -158, -11, -96, -21, -106, 61, 0, 31, -125, -50, -15, -73, -28, -21, 15, -62, -21, -9, 72, -51, 1, 8, 40, -62, -8].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 0, 17, 19, 0, 21, 0, 23, 25, 27, 29, 31, 33, 35, 0, 0, 0, 0, 0, 37, 39, 41, 43, 45, 0, 0, 47, 49, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 0, 18, 20, 0, 22, 0, 24, 26, 28, 30, 32, 34, 36, 0, 0, 0, 0, 0, 38, 40, 42, 44, 46, 0, 0, 48, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![95774, 93753, 97700, 90313, 94516, 97690, 99022, -103, 92543, -11, 95373, 96837, -84, 98984, -31, 92243, 93179, 95077, 95511, 96802, 96853, 98930, 60, -52, -18, -83, -45, 94689, 95149, 95386, 95589, 96789, -106, 61, 96866, 98783, 98961, -50, -15, -73, -28, -21, 15, -62, -21, -9, 72, -51, 1, 8, 40, -62, -8].span()
};
    let tree_10 = xgb_inference::Tree {
    base_weights: array![-3, -80, 8, -161, -59, -8, 18, -76, -40, -53, -53, 62, -10, 127, 15, -62, 40, -5, 30, -31, -8, 25, 70, -70, 18, -51, -152, 0, 23, 60, -11, 0, -86, 70, 16, -20, 19, -69, -16, 0, 26, -86, -2, -37, -13, -30, 6].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 0, 15, 0, 17, 19, 21, 23, 25, 27, 0, 0, 0, 29, 0, 0, 31, 33, 35, 37, 0, 0, 39, 41, 0, 43, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 0, 16, 0, 18, 20, 22, 24, 26, 28, 0, 0, 0, 30, 0, 0, 32, 34, 36, 38, 0, 0, 40, 42, 0, 44, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96088, 93753, 97586, 90313, 96033, 96195, 97615, -76, -40, 95972, -53, 96146, 96249, 97611, 97664, 95869, 96012, -5, 30, -31, 96339, 25, 70, 97625, 97667, 95774, 95909, 0, 23, 96288, 96356, 0, 97643, 70, 97700, -20, 19, -69, -16, 0, 26, -86, -2, -37, -13, -30, 6].span()
};
    let tree_11 = xgb_inference::Tree {
    base_weights: array![-2, -58, 5, -133, -45, 8, -37, -56, -103, -41, -39, 2, 102, -202, 18, -57, -52, -47, 30, 6, -166, 145, 2, 66, -4, -29, -3, -40, -113, 0, 17, 2, 69, -175, -1, 108, 259, -113, 141, -53, 14, -14, 25, -51, -12, 1, -21, 73, 15, 117, 28, 94, 12, 27, -15].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 0, 19, 21, 0, 23, 25, 0, 27, 29, 31, 33, 35, 37, 0, 39, 0, 0, 41, 43, 0, 0, 45, 0, 0, 0, 47, 49, 0, 51, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 0, 20, 22, 0, 24, 26, 0, 28, 30, 32, 34, 36, 38, 0, 40, 0, 0, 42, 44, 0, 0, 46, 0, 0, 0, 48, 50, 0, 52, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96088, 93179, 98714, 90313, 96033, 98522, 98730, -56, 92543, 95972, -39, 98484, 98658, -202, 98748, 92243, -52, 95869, 96012, 98456, 98491, 98626, 98671, 66, 98771, -29, -3, 95816, 95909, 0, 17, 98433, 69, -175, -1, 98543, 98641, -113, 98682, -53, 98897, -14, 25, -51, -12, 1, -21, 73, 15, 117, 28, 94, 12, 27, -15].span()
};
    let tree_12 = xgb_inference::Tree {
    base_weights: array![-2, -56, 3, -98, -42, -15, 8, -41, -76, -35, -37, -10, -69, 12, -28, -43, -39, -44, 20, -12, 29, 7, 88, -150, 13, -21, -3, -29, -71, -9, -50, 8, -63, 144, 1, 48, -3, -11, 8, -45, -10, -5, 8, 2, 53, 71, 35, -84, 31, -33, 6].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 0, 15, 17, 0, 19, 0, 21, 23, 25, 0, 27, 0, 29, 0, 31, 33, 0, 35, 0, 0, 37, 39, 41, 0, 43, 0, 45, 47, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 0, 16, 18, 0, 20, 0, 22, 24, 26, 0, 28, 0, 30, 0, 32, 34, 0, 36, 0, 0, 38, 40, 42, 0, 44, 0, 46, 48, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![95589, 93179, 97101, 90313, 95511, 97083, 98714, -41, 92543, 95386, -37, 97066, -69, 98566, 98730, 92243, -39, 95077, 20, 97048, 29, 98543, 98658, -150, 98748, -21, -3, 94924, 95149, 96951, -50, 98522, -63, 98581, 98671, 48, 98783, -11, 8, -45, -10, -5, 8, 2, 53, 71, 35, -84, 31, -33, 6].span()
};
    let tree_13 = xgb_inference::Tree {
    base_weights: array![-1, -41, 2, -20, -27, -5, 11, -20, -27, -3, -21, 200, 6, -27, 15, -4, 28, 78, 37, 59, -1, 5, -38, -3, -27, -9, 34, -57, 13, -25, -9, -1, 24, 21, -88, -11, -94, 42, 3].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 0, 15, 0, 17, 19, 21, 0, 23, 0, 0, 0, 25, 27, 0, 29, 31, 0, 33, 0, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 0, 16, 0, 18, 20, 22, 0, 24, 0, 0, 0, 26, 28, 0, 30, 32, 0, 34, 0, 36, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![95589, 93753, 97898, -20, 95511, 97876, 97921, 95386, -27, 97858, -21, 97907, 98011, 94516, 15, 97845, 28, 78, 37, 97952, 98158, 5, 94689, 97804, -27, 97945, 34, 98147, 98173, -25, -9, -1, 24, 21, -88, -11, -94, 42, 3].span()
};
    let tree_14 = xgb_inference::Tree {
    base_weights: array![-1, -16, 4, -8, -169, 46, 3, -14, 159, -116, -39, -36, 3, -7, -103, 88, 1, 55, -77, 64, 2, -18, 92, -76, 4, -4, -30, 77, 13, 56, 1].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 17, 0, 19, 21, 0, 0, 0, 0, 0, 0, 23, 25, 27, 0, 29, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 18, 0, 20, 22, 0, 0, 0, 0, 0, 0, 24, 26, 28, 0, 30, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96837, 96774, 96853, 96709, 96789, 46, 96866, 96700, 96741, -116, 96802, -36, 96885, 96572, -103, 88, 1, 55, -77, 64, 96895, 96530, 96605, -76, 96919, -4, -30, 77, 13, 56, 1].span()
};
    let tree_15 = xgb_inference::Tree {
    base_weights: array![-1, 0, -22, -1, 45, 0, -85, -1, 75, -113, -6, 1, -49, -17, -46, -1, 21, -66, 3].span(),
    left_children: array![1, 3, 0, 5, 0, 7, 9, 11, 0, 13, 0, 15, 17, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 0, 6, 0, 8, 10, 12, 0, 14, 0, 16, 18, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![99022, 98984, -22, 98897, 45, 98855, 98961, 98690, 75, 98930, -6, 98566, 98730, -17, -46, -1, 21, -66, 3].span()
};
    let tree_16 = xgb_inference::Tree {
    base_weights: array![-1, -27, 1, -22, -26, 3, -21, -29, 18, 1, 47, -95, 4, -21, -30, 2, -48, 91, 1, 34, -7, -43, 1, 1, 52, 46, 71, -113, 79, -26, 9, -24, -9, 1, -27, 47, 1, 5, -68, 55, 5, 22, -9].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 15, 17, 0, 19, 21, 0, 23, 0, 25, 27, 0, 29, 31, 0, 33, 0, 35, 0, 37, 39, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 16, 18, 0, 20, 22, 0, 24, 0, 26, 28, 0, 30, 32, 0, 34, 0, 36, 0, 38, 40, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![95373, 95255, 98714, 95149, -26, 98566, 98730, 95077, 18, 98543, 98641, -95, 98748, 93753, -30, 98531, -48, 98626, 98671, 34, 98783, 90313, 1, 98484, 52, 98581, 71, 98658, 98682, -26, 98897, -24, -9, 1, -27, 47, 1, 5, -68, 55, 5, 22, -9].span()
};
    let tree_17 = xgb_inference::Tree {
    base_weights: array![0, -10, 4, -7, -51, 45, 3, -9, 22, 26, 31, -73, 4, -6, -31, 21, 9, 0, -55, 33, 2, -10, 31, -16, 13, -13, 13, 13, 75, -108, 4, -2, -51, 51, 1, 10, -36, 55, 10, -3, -82, 50, 1].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 15, 0, 17, 19, 21, 0, 0, 23, 25, 0, 27, 29, 31, 33, 0, 0, 0, 0, 35, 37, 39, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 16, 0, 18, 20, 22, 0, 0, 24, 26, 0, 28, 30, 32, 34, 0, 0, 0, 0, 36, 38, 40, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![97101, 97083, 97181, 97066, -51, 97148, 97229, 97039, 22, 97110, 31, 97215, 97374, 96951, -31, 21, 97127, 97197, -55, 97325, 97395, 96941, 96967, -16, 13, -13, 13, 97315, 97336, 97392, 97400, -2, -51, 51, 1, 10, -36, 55, 10, -3, -82, 50, 1].span()
};
    let tree_18 = xgb_inference::Tree {
    base_weights: array![0, -3, 8, -2, -70, 44, -2, 1, -59, 19, 60, -152, 9, -1, 67, -86, 21, 72, -5, 52, -1, 1, -69, 37, -31, 37, 47, -106, 25, 36, 109, -66, 10, -1, 61, -85, 23, 30, -25, -14, -45, 16, -4, 16, -25, 46, 14, 19, -2].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 0, 19, 21, 0, 0, 23, 25, 27, 29, 31, 33, 0, 0, 35, 37, 0, 39, 41, 43, 45, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 0, 20, 22, 0, 0, 24, 26, 28, 30, 32, 34, 0, 0, 36, 38, 0, 40, 42, 44, 46, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![98158, 98147, 98272, 98070, -70, 98261, 98277, 98062, 98080, 98182, 60, -152, 98361, 98060, 67, -86, 98096, 98176, 98194, 98339, 98389, 98043, -69, 37, 98110, 98173, 47, 98191, 98229, 98332, 98346, -66, 98484, -1, 61, -85, 23, 30, -25, -14, -45, 16, -4, 16, -25, 46, 14, 19, -2].span()
};
    let tree_19 = xgb_inference::Tree {
    base_weights: array![0, -5, 4, -3, -55, 90, 1, -5, 86, -71, -2, 17, 51, -53, 3, -2, -86, 56, 8, 30, -39, -1, -65, 51, 2, -5, 86, -31, -1, -91, -34, -74, 4, -1, -22, 15, 44, -13, -38, -1, -18, -3, -56, 14, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 19, 0, 0, 21, 23, 25, 0, 0, 0, 0, 27, 0, 29, 0, 31, 33, 35, 0, 0, 37, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 20, 0, 0, 22, 24, 26, 0, 0, 0, 0, 28, 0, 30, 0, 32, 34, 36, 0, 0, 38, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![97586, 97521, 97615, 97488, 97529, 97611, 97664, 97483, 97502, -71, 97537, 17, 51, 97625, 97667, 97453, -86, 56, 8, 30, 97542, -1, 97643, 51, 97700, 97424, 97478, -31, -1, 97633, 97652, 97690, 97762, -1, -22, 15, 44, -13, -38, -1, -18, -3, -56, 14, 0].span()
};
    let tree_20 = xgb_inference::Tree {
    base_weights: array![0, 0, -44, 0, 36, -23, -4, 0, -53, -1, 50, -74, -2, 1, -37, -10, -31, -1, 10, -71, 0].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 0, 9, 11, 13, 0, 15, 0, 17, 19, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 0, 10, 12, 14, 0, 16, 0, 18, 20, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![99022, 98984, 99086, 98897, 36, -23, -4, 98855, 98961, 98714, 50, 98930, -2, 98491, 98730, -10, -31, -1, 10, -71, 0].span()
};
    let tree_21 = xgb_inference::Tree {
    base_weights: array![0, -8, 0, 3, -5, -2, 57, -96, 0, 1, -29, 58, 44, 61, -3, 0, 24, -102, -3, 15, 77, -30, 44, -109, 2, 0, -26, 33, -7, 18, -30, 37, 15, 29, -46, -1, -62, 27, 0].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 0, 13, 15, 17, 0, 19, 21, 23, 25, 0, 0, 27, 29, 31, 33, 0, 35, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 0, 14, 16, 18, 0, 20, 22, 24, 26, 0, 0, 28, 30, 32, 34, 0, 36, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![93753, -8, 98021, 97898, 98025, 97762, 97907, -96, 98060, 97751, 97766, 58, 97965, 98043, 98080, 97745, 24, -102, 97785, 97945, 97977, 98035, 44, 98070, 98096, 0, -26, 33, -7, 18, -30, 37, 15, 29, -46, -1, -62, 27, 0].span()
};
    let tree_22 = xgb_inference::Tree {
    base_weights: array![0, -15, 0, 0, -10, 0, 27, 0, -39, 0, 37, -16, -1, 0, -8].span(),
    left_children: array![1, 0, 3, 5, 0, 7, 0, 9, 11, 13, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 0, 8, 0, 10, 12, 14, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![90313, -15, 99022, 98984, -10, 98897, 27, 98855, 98961, 98714, 37, -16, -1, 0, -8].span()
};
    let tree_23 = xgb_inference::Tree {
    base_weights: array![0, -8, 1, 3, -60, 53, 0, -7, 182, -20, 1, -1, -61, 78, 23, 45, 0, -6, 74, -51, 1, -1, -12, 33, 7, 24, 0].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 13, 0, 15, 17, 0, 0, 0, 0, 19, 21, 23, 0, 25, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 14, 0, 16, 18, 0, 0, 0, 0, 20, 22, 24, 0, 26, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![96447, 96402, 96462, 96356, -60, 53, 96495, 96339, 96381, -20, 96530, 96288, -61, 78, 23, 45, 96548, 96195, 96308, -51, 96669, -1, -12, 33, 7, 24, 0].span()
};
    let tree_24 = xgb_inference::Tree {
    base_weights: array![0, -2, 8, 0, -127, 31, 0, -2, 56, -62, -22, -22, 7, 1, -111, 48, 35, 141, -7, -1, 43, -113, -8, 11, 81, 57, 31, -124, 9, 0, -4, 20, -14, 11, -18, 35, 11, 11, -2].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 0, 0, 17, 19, 21, 0, 23, 25, 27, 29, 0, 0, 31, 33, 35, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 0, 0, 18, 20, 22, 0, 24, 26, 28, 30, 0, 0, 32, 34, 36, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![98400, 98361, 98433, 98301, 98372, 31, 98456, 98272, 98307, -62, -22, -22, 98484, 98261, 98277, 48, 98339, 98462, 98491, 98021, 43, -113, 98286, 98332, 98346, 57, 31, -124, 98641, 0, -4, 20, -14, 11, -18, 35, 11, 11, -2].span()
};
    let tree_25 = xgb_inference::Tree {
    base_weights: array![0, -5, 2, -3, -37, 34, 1, -1, -31, 21, 24, -53, 2, -5, 125, -35, -11, 16, 7, 2, -40, 42, 1, -3, -36, 60, 9, -28, 17, -12, 9, -9, 10, 0, 30, -55, 2, -2, 38, 5, -22, 26, 0].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 19, 21, 23, 25, 0, 27, 0, 29, 31, 0, 33, 35, 37, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 20, 22, 24, 26, 0, 28, 0, 30, 32, 0, 34, 36, 38, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![97101, 97083, 97181, 97016, -37, 97148, 97229, 96983, 97022, 97110, 24, 97215, 97276, 96967, 96997, -35, 97066, 16, 97127, 97197, -40, 97261, 97291, 96951, -36, 60, 9, 97039, 17, -12, 9, -9, 10, 0, 30, -55, 97315, -2, 38, 5, -22, 26, 0].span()
};
    let tree_26 = xgb_inference::Tree {
    base_weights: array![0, -2, 4, -1, -13, 34, 1, -2, 21, 27, -2, 0, -32, -18, 65, -112, 1, -2, 42, -76, -1, 31, -58, 52, 33, 3, -70, 47, -2, 0, -13, 36, 6, 24, -8, -12, 30, 25, 1, -6, 33, -50, 0].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 0, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0, 33, 35, 0, 37, 0, 0, 0, 39, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 0, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 0, 34, 36, 0, 38, 0, 0, 0, 40, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![97898, 97876, 97921, 97858, -13, 34, 98011, 97762, 21, 97952, 98025, 97723, 97766, 97945, 97999, 98021, 98060, 97707, 97739, -76, 97785, 97934, -58, 97977, 33, 3, -70, 98043, 98062, 0, -13, 36, 6, 24, -8, -12, 30, 25, 1, -6, 33, -50, 0].span()
};
    let tree_27 = xgb_inference::Tree {
    base_weights: array![0, -2, 4, 0, -43, 30, -3, -2, 137, 17, 31, -84, 3, 0, -62, 77, -1, 56, -1, 27, -2, -1, 20, 30, 36, -75, 22, -6, 41, -120, 4, 0, -44, 22, -17, -9, -33, 27, 3, 15, -11, 36, 8, -46, -21, 10, -2].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 15, 17, 0, 0, 19, 21, 0, 0, 0, 23, 25, 27, 29, 31, 0, 33, 0, 35, 37, 39, 41, 43, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 16, 18, 0, 0, 20, 22, 0, 0, 0, 24, 26, 28, 30, 32, 0, 34, 0, 36, 38, 40, 42, 44, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![98158, 98143, 98272, 98110, -43, 98261, 98277, 98096, 98135, 98182, 31, -84, 98361, 98080, -62, 77, -1, 98176, 98194, 98301, 98389, 98070, 20, 98173, 36, 98191, 98198, 98286, 98307, 98372, 98484, 0, -44, 22, -17, -9, -33, 27, 3, 15, -11, 36, 8, -46, -21, 10, -2].span()
};
    let tree_28 = xgb_inference::Tree {
    base_weights: array![0, -1, 8, 0, -84, 29, 0, -1, 93, -92, 1, -40, 8, 0, -19, 40, 20, 50, -4, -1, 24, 17, 48, -89, 7, 0, -15, 21, -11, 3, -52, 40, -1].span(),
    left_children: array![1, 3, 5, 7, 9, 0, 11, 13, 15, 0, 0, 0, 17, 19, 0, 0, 0, 21, 23, 25, 0, 27, 0, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 0, 12, 14, 16, 0, 0, 0, 18, 20, 0, 0, 0, 22, 24, 26, 0, 28, 0, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![98522, 98484, 98543, 98456, 98491, 29, 98566, 98433, 98462, -92, 1, -40, 98641, 98406, -19, 40, 20, 98626, 98671, 98361, 24, 98590, 48, 98658, 98682, 0, -15, 21, -11, 3, -52, 40, -1].span()
};
    let tree_29 = xgb_inference::Tree {
    base_weights: array![0, -2, 3, -1, -48, 87, 1, -2, 17, 4, 47, -13, 3, -1, -56, 20, -1, -1, 23, 9, 56, -83, 1, -1, 5, 6, -11, 34, 10, 2, -52, 24, 0].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 0, 0, 0, 15, 17, 0, 19, 21, 23, 0, 25, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 0, 0, 0, 16, 18, 0, 20, 22, 24, 0, 26, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![97794, 97785, 97830, 97766, -48, 97804, 97858, 97762, 17, 4, 47, -13, 98011, 97758, -56, 97969, 98025, 97700, 23, 97945, 97977, 98021, 98035, -1, 5, 6, -11, 34, 10, 2, -52, 24, 0].span()
};
    let tree_30 = xgb_inference::Tree {
    base_weights: array![0, -1, 11, 0, -49, 29, 2, 0, 42, -23, 9, 0, -39, 30, 2, 29, -7, -1, 57, 3, 29, -11, 7, 0, -23, 24, 2, 11, -6].span(),
    left_children: array![1, 3, 5, 7, 0, 0, 9, 11, 13, 0, 15, 17, 0, 0, 0, 19, 21, 23, 25, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 0, 10, 12, 14, 0, 16, 18, 0, 0, 0, 20, 22, 24, 26, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![98730, 98714, 98748, 98671, -49, 29, 98771, 98658, 98682, -23, 98897, 98610, -39, 30, 2, 98855, 98961, 98590, 98641, 3, 29, -11, 99022, 0, -23, 24, 2, 11, -6].span()
};
    let tree_31 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_32 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_33 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_34 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_35 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_36 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_37 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_38 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_39 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_40 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_41 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_42 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_43 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_44 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_45 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_46 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_47 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_48 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_49 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_50 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_51 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_52 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_53 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_54 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_55 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_56 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_57 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_58 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_59 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_60 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_61 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_62 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_63 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_64 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_65 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_66 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_67 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_68 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_69 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_70 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_71 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_72 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_73 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_74 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_75 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_76 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_77 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_78 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_79 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_80 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_81 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_82 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_83 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_84 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_85 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_86 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_87 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_88 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_89 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_90 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_91 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_92 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_93 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_94 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_95 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_96 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_97 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_98 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_99 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let num_trees: u32 = 100;
    let base_score: i32 = 97359;
    let opt_type: u8 = 0;
    let trees: Span<xgb_inference::Tree> = array![tree_0, tree_1, tree_2, tree_3, tree_4, tree_5, tree_6, tree_7, tree_8, tree_9, tree_10, tree_11, tree_12, tree_13, tree_14, tree_15, tree_16, tree_17, tree_18, tree_19, tree_20, tree_21, tree_22, tree_23, tree_24, tree_25, tree_26, tree_27, tree_28, tree_29, tree_30, tree_31, tree_32, tree_33, tree_34, tree_35, tree_36, tree_37, tree_38, tree_39, tree_40, tree_41, tree_42, tree_43, tree_44, tree_45, tree_46, tree_47, tree_48, tree_49, tree_50, tree_51, tree_52, tree_53, tree_54, tree_55, tree_56, tree_57, tree_58, tree_59, tree_60, tree_61, tree_62, tree_63, tree_64, tree_65, tree_66, tree_67, tree_68, tree_69, tree_70, tree_71, tree_72, tree_73, tree_74, tree_75, tree_76, tree_77, tree_78, tree_79, tree_80, tree_81, tree_82, tree_83, tree_84, tree_85, tree_86, tree_87, tree_88, tree_89, tree_90, tree_91, tree_92, tree_93, tree_94, tree_95, tree_96, tree_97, tree_98, tree_99].span();
    let mut result: i32 = xgb_inference::accumulate_scores_from_trees(num_trees, trees, input_vector, 0, 0);

    if opt_type == 1 {
        // Implement logic here
    } else {
        result = result + base_score;
    }

    return result;
}